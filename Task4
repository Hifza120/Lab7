#include”Node.h”
#include<iostream>
using namespace std;
class LinkedList {
private:
    Node* head;  // Pointer to the head (start) of the list
     Node*tail;
public:
    // Constructor to initialize an empty list
    LinkedList() : head(nullptr) {}

    // Add a value to the linked list
    void addValue(int value) {
        Node* newNode = new Node(value);  // Create a new node
        if (!head) {
            head = newNode;  // If the list is empty, set head to the new node
            return;
        }
        Node* temp = head;
        while (temp->next) {
            temp = temp->next;  // Traverse to the end of the list
        }
        temp->next = newNode;  // Link the new node at the end
    }

    // Delete duplicate values from the linked list
    void deleteDuplicates() {
        if (!head || !head->next) return;  // If the list is empty or has only one element

        unordered_set<int> seen;  // Set to track visited values
        Node* current = head;
        Node* prev = nullptr;

        while (current) {
            if (seen.find(current->data) != seen.end()) {
                prev->next = current->next;  // Skip the duplicate node
                delete current;  // Free memory
            } else {
                seen.insert(current->data);  // Mark this value as seen
                prev = current;
            }
            current = prev->next;  // Move to the next node
        }
    }

    // Display the linked list
    void display() {
        if (!head) {
            cout << "The list is empty.\n";
            return;
        }
        Node* temp = head;
        while (temp) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }

    // Destructor to free memory
    ~LinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

// Main program to interact with the user
int main() {
    LinkedList list;  // Create an instance of LinkedList
    int choice, value;

    while (true) {
        // Display menu
        cout << "\nMenu:\n";
        cout << "1. Add a value to the linked list\n";
        cout << "2. Delete duplicate values from the linked list\n";
        cout << "3. Display the linked list\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter a value to add to the list: ";
                cin >> value;
                list.addValue(value);
                break;
            case 2:
                list.deleteDuplicates();
                cout << "Duplicates removed.\n";
                break;
            case 3:
                cout << "Linked list: ";
                list.display();
                break;
            case 4:
                cout << "Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    }

    return 0;
}
